var v 					= array_var = [];
var place 				= '';
var center_marker 			= [];
var administrative_levels 	= req_lvl = 1; 
var slider_loaded 			= map_location_changed = search_clicked = 0;
var req_lat 				= req_lng = '';
var overlay;
var main_search 			= 1;
var is_requested_search 		= 0;
var all_job_routs 			= [];
//var zoom_map_cordinate 	= '[{"lat":"40.6261638","lng":"-74.0329499"},{"lat":"40.6402325","lng":"-73.90605790000001"}]';
var zoom_map_cordinate_arr 	= (flash_message_cont != '') ? jQuery.parseJSON(flash_message_cont) : [];
var zoom_map_cordinate 		= [];
var place_changed 			= '';
var minzoomout_lvl 			= 0;
var all_uber_point 			= [];
var all_uber_job_routes		= [];
var is_called_id 			= 0;
var call_only_once			= 0;
var zoomLevel				= 2;


//console.log(flash_message_cont);
if (flash_message_cont) {
	var f = jQuery.parseJSON(flash_message_cont);
	//console.log(f[0]); console.log(f.ins_id); console.log(f.is_ondemand);
	for(i=0; i<f.length; i++){
		//console.log(f[i]); 
	};
}


//console.log(zoom_map_cordinate);

! function(e) {
	e.fn.mapSearch = function(t) {
		function n() {
			//console.log('arijit check iz:'+isZoomed+' pl:'+place.length+' di:'+d.is_searched);
			
			var sw_lat1 = sw_lng1 = ne_lat1 = ne_lng1 = '';
			
			if(place.length > 0 && isZoomed == 0)
			{
				if(typeof(place[0].geometry.viewport) != "undefined")
					sw_lat1 = place[0].geometry.viewport.getSouthWest().lat();
				else
					sw_lat1 = v.getBounds().getSouthWest().lat();
					
				if(typeof(place[0].geometry.viewport) != "undefined")
					sw_lng1 = place[0].geometry.viewport.getSouthWest().lng();
				else
					sw_lng1 = v.getBounds().getSouthWest().lng();
					
				if(typeof(place[0].geometry.viewport) != "undefined")
					ne_lat1 = place[0].geometry.viewport.getNorthEast().lat();
				else
					ne_lat1 = v.getBounds().getNorthEast().lat();
					
				if(typeof(place[0].geometry.viewport) != "undefined")
					ne_lng1 = place[0].geometry.viewport.getNorthEast().lng();
				else
					ne_lng1 = v.getBounds().getNorthEast().lng();
				
				return {
					sw_lat: sw_lat1,
					sw_lng: sw_lng1,
					ne_lat: ne_lat1,
					ne_lng: ne_lng1,
				}
			}
			else
			{
				return {
					//sw_lat: v.getCenter().lat(),
					//sw_lng: v.getCenter().lng(),
					
					sw_lat: v.getBounds().getSouthWest().lat(),
					sw_lng: v.getBounds().getSouthWest().lng(),
					ne_lat: v.getBounds().getNorthEast().lat(),
					ne_lng: v.getBounds().getNorthEast().lng(),
				}
			}
		}

		function a(t)
		{
			var s_place = '';
			if(place.length > 0 && isZoomed == 0){
				if(typeof(place[0].formatted_address) != "undefined")
					s_place = place[0].formatted_address;
			}
			
			if(map_location_changed == 1) { array_var = (d.values_arr != '') ? d.values_arr : ''; }
			else{ array_var = {'search_place': '', 'dateRange': '', 'priceRange': '', 'search_type': '', 'srch_lat' : '', 'srch_lon': '', 'sw_lat' : '', 'sw_lng': '', 'ne_lat': '', 'ne_lng': '', 'cmp_auth_id' : '', 'administrative_levels' : '1'}; }
			
			var sw_lat1 = sw_lng1 = ne_lat1 = ne_lng1 = '';
						
			if(place.length > 0 && typeof(place[0].geometry.viewport) != "undefined")
				sw_lat1 = place[0].geometry.viewport.getSouthWest().lat();
			else
				sw_lat1 = v.getBounds().getSouthWest().lat();
				
			if(place.length > 0 && typeof(place[0].geometry.viewport) != "undefined")
				sw_lng1 = place[0].geometry.viewport.getSouthWest().lng();
			else
				sw_lng1 = v.getBounds().getSouthWest().lng();
				
			if(place.length > 0 && typeof(place[0].geometry.viewport) != "undefined")
				ne_lat1 = place[0].geometry.viewport.getNorthEast().lat();
			else
				ne_lat1 = v.getBounds().getNorthEast().lat();
				
			if(place.length > 0 && typeof(place[0].geometry.viewport) != "undefined")
				ne_lng1 = place[0].geometry.viewport.getNorthEast().lng();
			else
				ne_lng1 = v.getBounds().getNorthEast().lng();
				
				
			e("#search_frm :input").each(function() {
				//console.log('name: '+this.name+' value: '+this.value);
					
				if (this.name == 'search_place'){
					array_var.search_place 	= (this.value.search(/\S/) != -1) ? this.value : '';
					s_place 				= (this.value.search(/\S/) != -1) ? this.value : s_place;
				}
					
				if (this.name == 'dateRange')
					array_var.dateRange = (this.value.search(/\S/) != -1) ? this.value : '';
					
				if (this.name == 'priceRange' && this.value.search(/\S/) != -1)
					array_var.priceRange = (this.value.search(/\S/) != -1) ? this.value : '';
					
				if (this.name == 'search_type' && this.value.search(/\S/) != -1)
					array_var.search_type = (this.value.search(/\S/) != -1) ? this.value : '';
					
				if (this.name == 'cmp_auth_id')
					array_var.cmp_auth_id = (this.value.search(/\S/) != -1) ? this.value : '';
					
				if (map_location_changed == 1) {
					array_var.priceRange = '';
				}
					
				if (this.name == 'srch_lat')
					array_var.srch_lat = (this.value.search(/\S/) != -1) ? this.value : v.getCenter().lat();
					
				if (this.name == 'srch_lon')
					array_var.srch_lon = (this.value.search(/\S/) != -1) ? this.value : v.getCenter().lng();
					
					
				if (this.name == 'sw_lat')
					array_var.sw_lat = (this.value.search(/\S/) != -1) ? this.value : sw_lat1;
					
				if (this.name == 'sw_lng')
					array_var.sw_lng = (this.value.search(/\S/) != -1) ? this.value : sw_lng1;
					
				if (this.name == 'ne_lat')
					array_var.ne_lat = (this.value.search(/\S/) != -1) ? this.value : ne_lat1;
					
				if (this.name == 'ne_lng')
					array_var.ne_lng = (this.value.search(/\S/) != -1) ? this.value : ne_lng1;
					
					
				if (this.name == 'administrative_levels'){
					array_var.administrative_levels = (this.value.search(/\S/) != -1) ? this.value : 1;
					req_lvl = (this.value.search(/\S/) != -1) ? this.value : 1;
				}
			});
				
			var farray_var = ''; var i = 0;
			$.each(array_var, function( index, value ) {
				if (index == 'search_place') 
					value = value.replace(/\s/g,"-");
					
				if (i == 0) farray_var = index + '=' + value;
				else farray_var = farray_var + '&' +  index + '=' + value;
				i++;
			});
				
			//console.log('all veriables 0: '+ farray_var);
				
			if (farray_var != ''){
				var add_var = (farray_var != '') ? '?' + farray_var + '&' : '?';
			}
			else{
				var add_var = (d.valueto_pass != '') ? '?' + d.valueto_pass + '&' : '?';
			}
				
			var dt = new Date();
			var time = dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds();
				
			//console.log('all veriables: '+ add_var + ' time: '+time);
				
			//var new_url 	= base_url +'product-details'  + add_var;
			//new_url 		= new_url;
				
			//var ptitle = (s_place != '') ? s_place + ' - Freewilder' : 'Freewilder - Services or products list';
				
			//console.log('new url: '+new_url+'    -- new title: '+ptitle);
				
			//if (typeof (history.pushState) != "undefined") {
			//	var obj = { Title: ptitle, Url: new_url };
			//	history.pushState(obj, obj.Title, obj.Url);
			//	document.title = ptitle;
			//} else {
			//    //alert("Browser does not support HTML5.");
			//}
				
			//if(call_only_once == 0)	
			//{
			//	call_only_once = 1;
			//	update_location_uber_rush();
			//}
				
			//each 3 minute check for uber rush update
			//setTimeout(function() { update_location_uber_rush(); }, 180000);
			setTimeout(function() { update_location_uber_rush(); }, 180000);
				
				
			function update_location_uber_rush() {
				console.log(job_uber_rush_det);
					
				var icon_html 	= '<div class="marker-ico animate_map_icon" ><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" width="25" height="25" viewBox="0 0 466.583 466.582" style="enable-background:new 0 0 466.583 466.582;" xml:space="preserve" class="hvr-icon-wobble-vertical"><g><path d="M233.292,0c-85.1,0-154.334,69.234-154.334,154.333c0,34.275,21.887,90.155,66.908,170.834   c31.846,57.063,63.168,104.643,64.484,106.64l22.942,34.775l22.941-34.774c1.317-1.998,32.641-49.577,64.483-106.64   c45.023-80.68,66.908-136.559,66.908-170.834C387.625,69.234,318.391,0,233.292,0z M233.292,233.291c-44.182,0-80-35.817-80-80   s35.818-80,80-80c44.182,0,80,35.817,80,80S277.473,233.291,233.292,233.291z"/></g></svg></div>';
					
				if (job_uber_rush_det.length > 0) {
					for(var i = 0; i < job_uber_rush_det.length; i++)
					{
						var job_status			= 0;
						var job_status_det		= '';
						var uber_rush_det 		= (typeof(job_uber_rush_det[i]) != "undefined") 			? job_uber_rush_det[i] 			: [];
						var job_det			= (typeof(uber_rush_det.job_det) != "undefined") 			? uber_rush_det.job_det 			: [];
						var route_lines_obj 	= (typeof(uber_rush_det.route_lines_obj) != "undefined") 	? uber_rush_det.route_lines_obj 	: [];
						var job_id			= (typeof(uber_rush_det.job_id) != "undefined") 			? uber_rush_det.job_id 			: [];
						var del_marker_pos 		= (typeof(uber_rush_det.marker_positions) != "undefined") 	? uber_rush_det.marker_positions 	: [];
							
						//get job current uber location details 	
						var formURL 			= main_base_url+'Jobs_controllers/get_uber_current_location?job_id='+job_id;
						is_called_id			= 1;
							
						if (job_status == 0) {
								
							$.ajax({
								url : 	formURL,
								type: 	"GET",
								async: 	false,
								success:	function(data, textStatus, jqXHR) 
								{
									console.log(is_called_id);	
									is_called_id	= 0;
										
									var data1				= jQuery.parseJSON(data);
									console.log(data1);
									var message 			= data1.message;
									console.log(message);
									var updated_location 	= data1.job_det,
									    job_status_det		= updated_location.status;
									console.log(job_status_det);	
										
									if (message == 'success')
									{
										if (job_status_det != 'completed' || job_status_det != 'client_canceled' || job_status_det != 'unknown')
										{
											console.log('dsadasdsad');
											if (del_marker_pos.length > 0) {
												for(var i=0; i < del_marker_pos.length; i++)
												{
													var pos = parseInt(del_marker_pos[i]);
													console.log('a: '+del_marker_pos[i]);
														
													w[pos].remove();
												}
											}
												
											if(route_lines_obj.length > 0) remove_polyline_uber_rush(route_lines_obj);
												
											if(updated_location.job_uber_lat != '' && updated_location.job_uber_lng != '')
											{
												//generate the line and marker again
												var a1 = new CustomMarker(
														new google.maps.LatLng(parseFloat(updated_location.job_uber_lat), parseFloat(updated_location.job_uber_lng)),
														v,
														{
															id: 			'marker_div_leg_pick_0_'+job_id,
															marker_id: 	'marker_div_leg_pick_0_'+job_id,
															marker_type: 	1,
															inner_cont:	icon_html,
															job_details: 	job_det,
															map_icon_url:  icon_html,
															user_rating:   '0',
															is_leg: 		1,
															transparent:   1
														}
													);
														
												d.marker_clusterer || a1.setMap(v), o(d.infowindow_content(t), a1), w.push(a1);
														
												//leg line color is blue if not approved other wise green
												marker_color 	 = '#28F202';
													
												var source_pick = [parseFloat(updated_location.job_pick_lat),	parseFloat(updated_location.job_pick_lng)];
												var source_drop = [parseFloat(updated_location.job_uber_lat), 	parseFloat(updated_location.job_uber_lng)];
													
												GetRoute(source_pick, source_drop, marker_color, 1, job_id);
													
												//Second poly line from leg start to the leg end point
												var source_pick2= [parseFloat(updated_location.job_uber_lat), 	parseFloat(updated_location.job_uber_lng)];
												var source_drop2= [parseFloat(updated_location.job_drop_lat), 	parseFloat(updated_location.job_drop_lng)];
													
												GetRoute_stroke(source_pick2, source_drop2, marker_color, 1, job_id);		
													
												//if (job_delivery_id != ''){
												//	if (job_uber_rush_det.length > 0) {
												//		for(var j = 0; j < job_uber_rush_det.length; j++){
												//			if ((typeof(job_uber_rush_det[j]) 	!= "undefined")) {
												//				var cur_job_id 	= job_uber_rush_det[j].job_id;
												//				if (cur_job_id 	== job_det.id){
												//						
												//					if(w.length > 0){
												//						var marker_pos = parseInt(w.length);
												//						marker_pos	= marker_pos - 1;
												//						marker_positions.push(marker_pos);
												//					}
												//					else	marker_positions.push(w.length);
												//						
												//					job_uber_rush_det[j].marker_positions = marker_positions;
												//				}
												//			}
												//		}
												//	}
												//}
											}
										}
									}
								}
							});
						}
					}
				}
					
				console.log(is_called_id)	
				//var t = setInterval(update_location_uber_rush, 180000);
				setTimeout(update_location_uber_rush, 180000);
			}
				
				
				
			"" != d.request_uri && (e(d.loading_class).show(), remove_polyline(v), e.get(d.request_uri  + add_var , function(t1) {
				t = jQuery.parseJSON(t1);
					
				var jlength 	= t1.length;
				var all_latlng = [];
					
				//req_lat = t.lat; req_lng = t.lng;
					
				$("#dateRange_outer").ionRangeSlider({
					type: "double",
					min: 	0,
					max: 	30,
					from:	0,
					postfix: 	" days",
					//onChange: function (data) { updateInputs(data, 'dateRange', 1); },
					onStart: 	function (data) { updateInputs(data, 'dateRange', 0); },
					onFinish: function (data) { updateInputs(data, 'dateRange', 1); },
				});
					
				$("#priceRange_outer").ionRangeSlider({
					type: "double",
					min: 	0,
					max: 	1000000,
					from:	0,
					prefix: 	"$",
					//onChange: function (data) { updateInputs(data, 'priceRange', 1); },
					onStart: 	function (data) { updateInputs(data, 'priceRange', 0); },
					onFinish: function (data) { updateInputs(data, 'priceRange', 1); },
				});
					
				if (jlength == 0) {
					var content = '<div data-mid="0" class="ms-listing p-listing clearfix">'
									+'<div id="0" item="0">'
										+'<div class="p-right"<h4 style="font-size: 17px;     font-weight: normal; text-transform: none;">We couldn\'t find any results that matched your criteria.</h4></div>'
									+'</div>'
								+'</div>';
						
					//$('#ms-listings').html(content);
					setbounce(e, all_latlng, req_lat, req_lng, t);
				}
				else{
					all_latlng = t.marker;
					//s1(e, t);
					p(), e(d.listings_el).empty(), e.each(t[d.results_key], function(e, t) {
						u(e, t), s(e, t)
					}), e(d.pagination_el).empty().prepend(g(t.meta)) /*,e("." + d.pagi_link_class).click(function() {
						b.page = e(this).data("href"), e.fn.mapSearch.update(b)
					})*/, d.marker_clusterer && "function" == typeof MarkerClusterer ? (f.clearMarkers(), f.addMarkers(w)) : l(), e(d.loading_class).hide();
					
					//console.log(w);
					
					if (t[d.results_key].length == 0) {
						var content = '<div data-mid="0" class="ms-listing p-listing clearfix">'
									+'<div id="0" item="0">'
										+'<div class="p-right"<h4 style="font-size: 17px;     font-weight: normal; text-transform: none;">We couldn\'t find any results that matched your criteria.</h4></div>'
									+'</div>'
								+'</div>';
						
						//$('#ms-listings').html(content);
					}
					
					var lowest_price = highest_price = '';
					//var all_prices_len = t.all_product_price.length;
					var all_prices_len = 1;
					var site_currency  = t.site_currency;
					
					//console.log('arijit check: '+slider_loaded);
					
					if (all_prices_len > 0) {
						//e.each(t.all_product_price, function(index, value) {
						//	if (index == 0) highest_price = value;
						//	if ((index+1) == all_prices_len) lowest_price = value;
						//});
						
						//if ((t.req_price_range_low != '') && (lowest_price != t.req_price_range_low)) {
						//	lowest_price = t.req_price_range_low;
						//}
						//
						//if ((t.req_price_range_high != '') && (highest_price != t.req_price_range_high)) {
						//	highest_price = t.req_price_range_high;
						//}
						
						if (lowest_price > 0)
							lowest_price = Math.round(lowest_price);
						
						highest_price = Math.round(highest_price);
						
						if (lowest_price == highest_price)
							lowest_price = 0;
						
						//console.log('arijit new lp: '+lowest_price+' hp: '+highest_price);
						
						//if (lowest_price >= 0 && highest_price >= 0) {
						//	if (slider_loaded == 0) {
						//		$( "#slider-range" ).slider({
						//			range: true,
						//			min: lowest_price,
						//			max: highest_price,
						//			values: [ lowest_price, highest_price ],
						//			slide: function( event, ui ) {
						//				range_moved = 1;
						//				$( "#amount" ).val( site_currency + ' ' + ui.values[ 0 ] + " - " + site_currency + ' ' + ui.values[ 1 ] );
						//				$('#price_high').val(ui.values[ 1 ]);
						//				$('#price_low').val(ui.values[ 0 ]);
						//			},
						//			stop: function( event, ui ) {
						//				map_location_changed = 0;
						//				place = '';
						//				$("#page_no").val(1);
						//				$("#search_filter").click();
						//			},
						//			create: function() {
						//				slider_loaded = 1;
						//			}
						//		});
						//		
						//		$( "#amount" ).val( site_currency + ' ' + lowest_price + " - " + site_currency + ' ' + highest_price );
						//		$('#price_high').val(highest_price);
						//		$('#price_low').val(lowest_price);
						//	}
						//}
						//else
						//{
						//	if (slider_loaded == 0) {
						//		$( "#slider-range" ).slider({
						//			range: true,
						//			min: 1,
						//			max: 2000,
						//			values: [ 1, 2000 ],
						//			slide: function( event, ui ) {
						//				$( "#amount" ).val( site_currency + ' ' + ui.values[ 0 ] + " - " + site_currency + ' ' + ui.values[ 1 ] );
						//				$('#price_high').val(ui.values[ 1 ]);
						//				$('#price_low').val(ui.values[ 0 ]);
						//			},
						//			stop: function( event, ui ) {
						//				map_location_changed = 0;
						//				place = '';
						//				$("#page_no").val(1);
						//				$("#search_filter").click();
						//			},
						//			create: function() {
						//				slider_loaded = 1;
						//			}
						//		});
						//		
						//		$( "#amount" ).val( 'USD 1 - USD 20000' );
						//		$('#price_high').val(1);
						//		$('#price_low').val(20000);
						//	}
						//}
					}
						
					setbounce(e, all_latlng, req_lat, req_lng, t);
					$('.listing_slider_default').hide();
				}
			}))
		}
		
		function updateInputs (data, change_type, do_refresh) {
			
			//console.log(data);
			var price_range_data_from 	= (typeof(data.from) != "undefined") 	? data.from 	: '0';
			var price_range_data_to 		= (typeof(data.to) != "undefined") 	? data.to 	: '0';
			
			$('#'+change_type).val(price_range_data_from+','+price_range_data_to);
			if(do_refresh) $("#search_filter").click();
		}
		
		function string_escape(args) {
			try{
				fixedstring=decodeURIComponent(escape(args));
			}catch(e){
				fixedstring=args;
			}
			
			return fixedstring;
		}
			
		function o(e, t) {
			google.maps.event.addListener(t, "click", function() {
				markerClick = 1;
				C.setContent(e); 
				C.open(v, t);
			})
		}
			
		function s(e, t) {
			var user_type 		= (typeof(t.user_type) != "undefined") 			? t.user_type 			: '';
			var user_rating	= (typeof(t.user_rating) != "undefined") 		? t.user_rating 		: ''; 
			//console.log(t);
				
			if (user_type == 'customer') 		var nicon_group 	= (typeof(d.icon_style.customer) 	!= "undefined") 	? d.icon_style.customer 	: '';
			else if (user_type == 'driver') 	var nicon_group 	= (typeof(d.icon_style.driver) 	!= "undefined") 	? d.icon_style.driver 	: '';
			else if (user_type == 'broker') 	var nicon_group 	= (typeof(d.icon_style.broker) 	!= "undefined") 	? d.icon_style.broker 	: '';
			else if (user_type == 'fleet') 	var nicon_group 	= (typeof(d.icon_style.fleet) 	!= "undefined") 	? d.icon_style.fleet 	: '';
			else if (user_type == 'depot') 	var nicon_group 	= (typeof(d.icon_style.depot) 	!= "undefined") 	? d.icon_style.depot 	: '';
			else if (user_type == 'job') 		var nicon_group 	= (typeof(t.job_icon) 			!= "undefined") 	? t.job_icon 			: '';
			else							var nicon_group 	= [{url: "",  scaledSize: ""}];
				
			var map_icon 	= {
				url: 		((typeof(nicon_group.url) != "undefined") && (nicon_group.url != ''))					? nicon_group.url 		: d.icon,
				scaledSize: 	new google.maps.Size(30, 27), // scaled size
			};
				
				
			if (user_type == 'job') {
					
				var job_details 	= (typeof(t.job_info) 	!= "undefined") ? t.job_info : [];
				var job_last_active = (typeof(job_details.last_activity_date_diff) 	!= "undefined") ? job_details.last_activity_date_diff  : 0;
				var job_delivery_id	= (typeof(job_details.delivery_id) 	!= "undefined") 		 ? job_details.delivery_id 			: '';
				var job_id		= (typeof(job_details.id) 	!= "undefined") 				 ? job_details.id 					: '';	
				var marker_positions= [];
					
				var delivery		= job_details.delivery;
				var delivery_status	= job_details.delivery_status;
					
				var transparent_val = 1;
					
				if (job_last_active >= 28)
					transparent_val = 0.3;
				else if (job_last_active >= 15)
					transparent_val = 0.5;
				else if (job_last_active >= 5)
					transparent_val = 0.7;
				else if (job_last_active >= 2)
					transparent_val = 0.8;
					
				//console.log('diff: '+job_last_active+' tva: '+transparent_val);
				var transparent_style = (parseFloat(transparent_val) > 0) ? 'style="opacity : '+transparent_val+'"' : '';
					
				var html 	= '<div class="marker-ico" '+transparent_style+'><img src="'+map_icon.url+'" alt="cyan-man" class="main-marker-icon" /></div>';
					
				var  a 	= 	new CustomMarker(
								new google.maps.LatLng(t.pick_lat, t.pick_long),
								v,
								{
									id: 			'start_marker_div_' + t._id,
									marker_id: 	'start_marker_div_' + t._id,
									inner_cont:	html,
									marker_type: 	1,
									job_details: 	t.job_info,
									map_icon_url:  map_icon.url,
									user_rating:   user_rating,
									transparent:   transparent_val
								}
							),
					b = new CustomMarker(
							new google.maps.LatLng(t.drop_lat, t.drop_long),
								v,
								{
									id: 			'end_marker_div_' + t._id,
									marker_id: 	'end_marker_div_' + t._id,
									marker_type: 	1,
									inner_cont:	html,
									job_details: 	t.job_info,
									map_icon_url:  map_icon.url,
									user_rating:   user_rating,
									transparent:   transparent_val
								}
							);
					
				/*if (job_delivery_id != '') {
						
					if(w.length > 0){
						var marker_pos = parseInt(w.length);
						marker_pos	= marker_pos - 1;
						marker_positions.push(marker_pos);
					}
					else	marker_positions.push(w.length);
					
					d.marker_clusterer || a.setMap(v), o(d.infowindow_content(t), a), o(d.infowindow_content(t), b), w.push(a), w.push(b);
					
					if(w.length > 0){
						var marker_pos = parseInt(w.length);
						marker_pos	= marker_pos - 1;
						marker_positions.push(marker_pos);
					}
					else	marker_positions.push(w.length);
						
					var uber_rsh_details	= {'job_id' : job_id, 'delivery_id': job_delivery_id, 'marker_positions' : marker_positions};
					var not_in 			= 1;
						
					if (job_uber_rush_det.length > 0) {
						for(var j = 0; j < job_uber_rush_det.length; j++){
							if ((typeof(job_uber_rush_det[j]) 	!= "undefined")) {
								var cur_job_id 	= job_uber_rush_det[j].job_id;
								if (cur_job_id 	== job_id)	not_in = 0;
							}
						}
							
						if(not_in == 1) 	job_uber_rush_det.push(uber_rsh_details);
					}
					else 	job_uber_rush_det.push(uber_rsh_details);
				}
				else*/ 	d.marker_clusterer || a.setMap(v), o(d.infowindow_content(t), a), o(d.infowindow_content(t), b), w.push(a), w.push(b);
					
					
				//Ploting the lines
				var has_legs 				= parseInt(t.job_info.has_legs);
				var is_job_approved 		= parseInt(t.job_info.is_job_approved);
				var job_has_updated_loc 		= parseInt(t.job_info.job_has_updated_loc);
					
				var all_legs 				= t.job_info.legs_arr;
				var source 				= [parseFloat(t.pick_lat), parseFloat(t.pick_long)];
				var destination 			= [parseFloat(t.drop_lat), parseFloat(t.drop_long)];
				var marker_color 			= (is_job_approved == 0) ? t.job_info.marker_color : '#28F202';
					
				//if job is not approved connect the start and destination with a line otherwise show only the approved line.
				if (is_job_approved == 0)
					GetRoute(source, destination, marker_color, transparent_val);
					
				if (job_has_updated_loc == 1) {
					//console.log('arijit1 : '+is_job_approved);
						
					var job_det 			= t.job_info;
					var map_icon_leg 		= t.job_info.leg_icon;
					var marker_vars_pick 	= marker_vars_drop = [];
					var is_dashed_map 		= 0;
						
					if (all_legs.length > 0) {
						//console.log(all_legs);	
						//first loop drap redline with all the legs from start to end
						for (var al = 0; al < all_legs.length; al++)
						{
							if (al == (all_legs.length -1))  is_dashed_map = 1;
							var  cur_det 	 			= all_legs[al];
								
							//Check if the first position is same as job start
							if ((al == 0) && (t.pick_lat != cur_det.pick_up.lat)) {
								//console.log('map from start. is dashed: '+is_dashed_map);
									
								//Second poly line from leg start to the leg end point
								var source_pick = [parseFloat(t.pick_lat),			parseFloat(t.pick_long)];
								var source_drop = [parseFloat(cur_det.pick_up.lat), 	parseFloat(cur_det.pick_up.long)];
									
									
								//We need to store all the marker pointers for remove and regenerate them for uber rush jobs
								if (job_delivery_id != '') {
									//var route_lines_arr = [source_pick, source_drop];
									var uber_rsh_details= {'job_id' : job_id, 'job_det' : job_det, 'delivery_id': job_delivery_id, 'marker_positions' : [], 'route_lines_obj' : []};
									var not_in 		= 1;
										
									//uber_rsh_details.route_lines.push(uber_lines_count);
									if (job_uber_rush_det.length > 0) {
										for(var j = 0; j < job_uber_rush_det.length; j++){
											if ((typeof(job_uber_rush_det[j]) 	!= "undefined")) {
												var cur_job_id 	= job_uber_rush_det[j].job_id;
												if (cur_job_id 	== job_id)	not_in = 0;
											}
										}
											
										if(not_in == 1) 	job_uber_rush_det.push(uber_rsh_details);
									}
									else 	job_uber_rush_det.push(uber_rsh_details);
								}
									
									
									
								//leg line color is blue if not approved other wise green
								marker_color 	 = (is_job_approved == 0) ? '#032DCD' : '#28F202';
								GetRoute(source_pick, source_drop, marker_color, transparent_val, job_id);
									
									
								//Second poly line from leg start to the leg end point
								var source_pick2 = [parseFloat(cur_det.pick_up.lat),		parseFloat(cur_det.pick_up.long)];
								var source_drop2 = [parseFloat(cur_det.drop_point.lat), 	parseFloat(cur_det.drop_point.long)];
									
								var uber_lines_count 	= all_uber_job_routes.length;	
									
								//leg line color is blue if not approved other wise green
								marker_color2 	= (is_job_approved == 0) ? '#032DCD' : '#28F202';
									
								if(is_dashed_map == 1) GetRoute_stroke(source_pick2, source_drop2, marker_color2, transparent_val, job_id);
								else GetRoute(source_pick2, source_drop2, marker_color2, transparent_val, job_id);
									
							}
							else{
								//console.log('map from another point. is dashed: '+is_dashed_map);	
									
								//Second poly line from leg start to the leg end point
								var source_pick2 = [parseFloat(cur_det.pick_up.lat),		parseFloat(cur_det.pick_up.long)];
								var source_drop2 = [parseFloat(cur_det.drop_point.lat), 	parseFloat(cur_det.drop_point.long)];
									
								var uber_lines_count 	= all_uber_job_routes.length;		
									
								//leg line color is blue if not approved other wise green
								marker_color2 	= (is_job_approved == 0) ? '#032DCD' : '#28F202';
									
									
								if(is_dashed_map == 1) GetRoute_stroke(source_pick2, source_drop2, marker_color2, transparent_val, job_id);
								else GetRoute(source_pick2, source_drop2, marker_color2, transparent_val, job_id);
									
									
									
									
								//We need to store all the marker pointers for remove and regenerate them for uber rush jobs
								if (job_delivery_id != '') {
										
									//var route_lines_arr = [source_pick, source_drop];
									var uber_rsh_details= {'job_id' : job_id, 'job_det' : job_det, 'delivery_id': job_delivery_id, 'marker_positions' : [], 'route_lines_obj' : []};
									var not_in 		= 1;
										
									//uber_rsh_details.route_lines.push(uber_lines_count);
										
									if (job_uber_rush_det.length > 0) {
										for(var j = 0; j < job_uber_rush_det.length; j++){
											if ((typeof(job_uber_rush_det[j]) 	!= "undefined")) {
												var cur_job_id 	= job_uber_rush_det[j].job_id;
												if (cur_job_id 	== job_id)	not_in = 0;
											}
										}
											
										if(not_in == 1) 	job_uber_rush_det.push(uber_rsh_details);
									}
									else 	job_uber_rush_det.push(uber_rsh_details);
								}
							}
								
							var html 		= '<div class="marker-ico" '+transparent_style+'><img src="'+map_icon_leg+'" alt="cyan-man" class="main-marker-icon" /></div>';
							var icon_html 	= '<div class="marker-ico animate_map_icon" '+transparent_style+'><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" width="25" height="25" viewBox="0 0 466.583 466.582" style="enable-background:new 0 0 466.583 466.582;" xml:space="preserve" class="hvr-icon-wobble-vertical"><g><path d="M233.292,0c-85.1,0-154.334,69.234-154.334,154.333c0,34.275,21.887,90.155,66.908,170.834   c31.846,57.063,63.168,104.643,64.484,106.64l22.942,34.775l22.941-34.774c1.317-1.998,32.641-49.577,64.483-106.64   c45.023-80.68,66.908-136.559,66.908-170.834C387.625,69.234,318.391,0,233.292,0z M233.292,233.291c-44.182,0-80-35.817-80-80   s35.818-80,80-80c44.182,0,80,35.817,80,80S277.473,233.291,233.292,233.291z"/></g></svg></div>';
								
							if (parseFloat(cur_det.pick_up.lat) != parseFloat(t.pick_lat)) {
									
								var a1 = new CustomMarker(
										new google.maps.LatLng(parseFloat(cur_det.pick_up.lat), parseFloat(cur_det.pick_up.long)),
										v,
										{
											id: 			'marker_div_leg_pick_'+al+'_'+job_det.id,
											marker_id: 	'marker_div_leg_pick_'+al+'_'+job_det.id,
											marker_type: 	1,
											inner_cont:	(is_dashed_map == 1) ? icon_html : html,
											job_details: 	job_det,
											map_icon_url:  map_icon_leg,
											user_rating:   '0',
											is_leg: 		1,
											transparent:   transparent_val
										}
									);
										
										
								d.marker_clusterer || a1.setMap(v), o(d.infowindow_content(t), a1), w.push(a1);
									
								if (job_delivery_id != ''){
									if (job_uber_rush_det.length > 0) {
										for(var j = 0; j < job_uber_rush_det.length; j++){
											if ((typeof(job_uber_rush_det[j]) 	!= "undefined")) {
												var cur_job_id 	= job_uber_rush_det[j].job_id;
												if (cur_job_id 	== job_det.id){
														
													if(w.length > 0){
														var marker_pos = parseInt(w.length);
														marker_pos	= marker_pos - 1;
														marker_positions.push(marker_pos);
													}
													else	marker_positions.push(w.length);
														
													job_uber_rush_det[j].marker_positions = marker_positions;
												}
											}
										}
									}
								}
								
								//if (job_delivery_id != '') {
								//	
								//	if(w.length > 0){
								//		var marker_pos = parseInt(w.length);
								//		marker_pos	= marker_pos - 1;
								//		marker_positions.push(marker_pos);
								//	}
								//	else	marker_positions.push(w.length);
								//		
								//	var uber_rsh_details	= {'job_id' : job_id, 'delivery_id': job_delivery_id, 'marker_positions' : marker_positions};
								//	var not_in 			= 1;
								//		
								//	if (job_uber_rush_det.length > 0) {
								//		for(var j = 0; j < job_uber_rush_det.length; j++){
								//			if ((typeof(job_uber_rush_det[j]) 	!= "undefined")) {
								//				var cur_job_id 	= job_uber_rush_det[j].job_id;
								//				if (cur_job_id 	== job_id)	not_in = 0;
								//			}
								//		}
								//			
								//		if(not_in == 1) 	job_uber_rush_det.push(uber_rsh_details);
								//	}
								//	else 	job_uber_rush_det.push(uber_rsh_details);
								//}
							}
								
							if (parseFloat(cur_det.drop_point.lat) != parseFloat(t.drop_lat)) {
									
								b1 = new CustomMarker(
									new google.maps.LatLng(parseFloat(cur_det.drop_point.lat), parseFloat(cur_det.drop_point.long)),
									v,
									{
										id: 			'marker_div_leg_drop_'+al+'_'+job_det.id,
										marker_id: 	'marker_div_leg_drop_'+al+'_'+job_det.id,
										marker_type: 	1,
										inner_cont:	html,
										job_details: 	job_det,
										map_icon_url:  map_icon_leg,
										user_rating:   '0',
										is_leg: 		1,
										transparent:   transparent_val
									}
								);
									
								d.marker_clusterer || b1.setMap(v), o(d.infowindow_content(t), b1), w.push(b1);
									
								//marker_positions.push(w.length);	
								//if (job_delivery_id != '')  	job_uber_rush_det.marker_positions = marker_positions;
							}
						}
					}
				}
				else if (all_legs.length > 0)
				{
					//console.log('arijit: '+is_job_approved);
						
					var job_det 			= t.job_info;
					var map_icon_leg 		= t.job_info.leg_icon;
					var marker_vars_pick 	= marker_vars_drop = [];
						
					if (all_legs.length > 0) {
						//console.log('arijit job approved : '+is_job_approved);
							
						//first loop drap redline with all the legs from start to end
						for (var al = 0; al < all_legs.length; al++)
						{
							var  cur_det 	 			= all_legs[al];
								
							//we have to drap three polyline to show properly
								//Only if job is not approved other wise draw only leg start to end poly line
								if (is_job_approved == 0)
								{
									//First poly line from job start to the leg start point
									if (t.pick_lat != cur_det.pick_up.lat) {
										//console.log('plot 1');
										var source_pick1 = [parseFloat(t.pick_lat),				parseFloat(t.pick_long)];
										var source_drop1 = [parseFloat(cur_det.pick_up.lat), 		parseFloat(cur_det.pick_up.long)];
											
										//leg line color is red 
										marker_color1 	= '#FFFFFF';
										//GetRoute(source_pick1, source_drop1, marker_color1);
									}
								}
									
								//Second poly line from leg start to the leg end point
								var source_pick2 = [parseFloat(cur_det.pick_up.lat),		parseFloat(cur_det.pick_up.long)];
								var source_drop2 = [parseFloat(cur_det.drop_point.lat), 	parseFloat(cur_det.drop_point.long)];
									
								//leg line color is blue if not approved other wise green
								marker_color2 	= (is_job_approved == 0) ? '#032DCD' : '#28F202';
								GetRoute(source_pick2, source_drop2, marker_color2, transparent_val);
									
								//Only if job is not approved other wise draw only leg start to end poly line
								if (is_job_approved == 0)
								{
									//Third poly line from leg end to the job end point
									if (t.drop_lat != cur_det.drop_point.lat) {
											
										var source_pick3 = [parseFloat(cur_det.drop_point.lat),	parseFloat(cur_det.drop_point.long)];
										var source_drop3 = [parseFloat(t.drop_lat), 				parseFloat(t.drop_long)];
											
										//leg line color is red 
										marker_color3 	= '#FFFFFF';
										//GetRoute(source_pick3, source_drop3, marker_color3);
									}
								}
									
							var html = '<div class="marker-ico" '+transparent_style+'><img src="'+map_icon_leg+'" alt="cyan-man" class="main-marker-icon" /></div>';
								
								
								
							if (parseFloat(cur_det.pick_up.lat) != parseFloat(t.pick_lat)) {
									
								var a1 = new CustomMarker(
										new google.maps.LatLng(parseFloat(cur_det.pick_up.lat), parseFloat(cur_det.pick_up.long)),
										v,
										{
											id: 			'marker_div_leg_pick_'+al+'_'+job_det.id,
											marker_id: 	'marker_div_leg_pick_'+al+'_'+job_det.id,
											marker_type: 	1,
											inner_cont:	html,
											job_details: 	job_det,
											map_icon_url:  map_icon_leg,
											user_rating:   '0',
											is_leg: 		1,
											transparent:   transparent_val
										}
									);
									
								d.marker_clusterer || a1.setMap(v), o(d.infowindow_content(t), a1), w.push(a1);
									
								//marker_positions.push(w.length);	
								//if (job_delivery_id != '')  	job_uber_rush_det.marker_positions = marker_positions;
							}
								
							if (parseFloat(cur_det.drop_point.lat) != parseFloat(t.drop_lat)) {
									
								b1 = new CustomMarker(
									new google.maps.LatLng(parseFloat(cur_det.drop_point.lat), parseFloat(cur_det.drop_point.long)),
									v,
									{
										id: 			'marker_div_leg_drop_'+al+'_'+job_det.id,
										marker_id: 	'marker_div_leg_drop_'+al+'_'+job_det.id,
										marker_type: 	1,
										inner_cont:	html,
										job_details: 	job_det,
										map_icon_url:  map_icon_leg,
										user_rating:   '0',
										is_leg: 		1,
										transparent:   transparent_val
									}
								);
									
								d.marker_clusterer || b1.setMap(v), o(d.infowindow_content(t), b1), w.push(b1);
									
									
								//marker_positions.push(w.length);	
								//if (job_delivery_id != '')  	job_uber_rush_det.marker_positions = marker_positions;	
							}
						}
					}
				}
				else
					GetRoute(source, destination,marker_color, transparent_val);
			}
			else{
					
				var rate_html 		= '';
				if (user_rating != '')
					rate_html 	= '<div class="star"><img src="'+assets_url+'site/images/star.png" alt="star" /><span class="map-marker-rating">'+user_rating+'</span></div>';
					
				var html = '<div class="marker-ico" style=""><img src="'+map_icon.url+'" alt="cyan-man" class="main-marker-icon" />'+rate_html+'</div>';
					
				var  n = d.listing_latlng(t),
					//a = new google.maps.Marker({
					//	position: 	new google.maps.LatLng(n[0], n[1]),
					//	title: 		string_escape(t.name),
					//	mid: 		e,
					//	icon: 		map_icon,
					//	optimized: 	false
					//});
					a = 	new CustomMarker(
							new google.maps.LatLng(n[0], n[1]),
							v,
							{
								marker_type: 	0,
								id: 			'start_marker_div_' + t._id,
								marker_id: 	'end_marker_div_' + t._id,
								inner_cont:	html
							}
						);
					
				d.marker_clusterer || a.setMap(v), o(d.infowindow_content(t), a), w.push(a)
			}
				
		}
			
			
		function setbounce(e, markers, req_lat, req_lng, t){
				
			var image			= 'https://a2.muscache.com/airbnb/static/page2/address_pin-92390e9790506fcd9274559dc0dd2efe.png';
			var center_myLatlng = new google.maps.LatLng(req_lat, req_lng);
				
			var set_cus_zoom = 0;
				
			var dt = new Date();
			var time = dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds();
				
			if (flash_msg == 'job_add_success' && isZoomed == 0)
			{
				//zoom_map_cordinate[zoom_map_cordinate_arr[0], zoom_map_cordinate_arr[1]];
				zoom_map_cordinate.push(zoom_map_cordinate_arr[0]);
				zoom_map_cordinate.push(zoom_map_cordinate_arr[1]);
				console.log(zoom_map_cordinate);
					
				var ondemand_job_id_new 		= (typeof(zoom_map_cordinate_arr.ins_id) != "undefined") 	? zoom_map_cordinate_arr.ins_id 			: '';
				var is_ondemand_post 		= (typeof(zoom_map_cordinate_arr.is_onsd) != "undefined") 	? parseInt(zoom_map_cordinate_arr.is_onsd) 	: '';
				//var job_start_end_cordinate = jQuery.parseJSON(zoom_map_cordinate);
				var job_start_end_cordinate 	= zoom_map_cordinate;
				var latlngbounds 			= new google.maps.LatLngBounds();
					
				for (var i = 0; i < job_start_end_cordinate.length; i++) {
					var data 		= job_start_end_cordinate[i];
					
					//console.log('lat: '+data.lat+' lng: '+data.lng)
						
					var myLatlng 	= new google.maps.LatLng(data.lat, data.lng);
					var marker 	= new google.maps.Marker({
						position: myLatlng
					});
						
					latlngbounds.extend(marker.position);
					//console.log(marker);
				}
					
				if (markers.length > 0) {
					v.setCenter(latlngbounds.getCenter());
					v.fitBounds(latlngbounds);
					
					isZoomed = 1;
				}
					
				maxzoomout_lvl = 0;
					
				//open payment popup after map idle and if on-demand job is just submitted
				if (ondemand_job_id_new != '' && is_ondemand_post == 1) {
					console.log('job_id: ' +ondemand_job_id_new);
					open_popup_customer(ondemand_job_id_new, 1);
				}
			}
			else
			{
				//console.log('arijit bounce');
				if (!isZoomed) {
					//console.log('bounce called');
					isBounce = isZoomed = 1;
					//Create LatLngBounds object.
					var latlngbounds = new google.maps.LatLngBounds();
					
					//if (place_changed == 0)
					{
						
						//for (var i = 0; i < markers.length; i++) {
						//	var data 		= markers[i];
						//	//console.log('marker ln: '+data);
						//	if (data.type == 1) {
						//		//console.log('lat: '+data.lat+' lng: '+data.lng)
						//		var myLatlng 	= new google.maps.LatLng(data.lat, data.lng);
						//		var marker 	= new google.maps.Marker({
						//		    position: myLatlng
						//		});
						//		//Extend each marker's position in LatLngBounds object.
						//		latlngbounds.extend(marker.position);
						//	}
						//	else if (data.type == 2){
						//		
						//		var marker_1 	=  data.pick_up; var marker_2 	=  data.drop;
						//		
						//		var myLatlng1 	= new google.maps.LatLng(marker_1.lat, marker_1.lng);
						//		var marker1 	= new google.maps.Marker({
						//		    position: myLatlng1
						//		});
						//		//Extend each marker's position in LatLngBounds object.
						//		latlngbounds.extend(marker1.position);
						//		
						//		
						//		var myLatlng2 	= new google.maps.LatLng(marker_2.lat, marker_2.lng);
						//		var marker2 	= new google.maps.Marker({
						//		    position: myLatlng2
						//		});
						//		//Extend each marker's position in LatLngBounds object.
						//		latlngbounds.extend(marker2.position);
						//	}
						//}
						//
						//if (markers.length > 0) {
						//	v.setCenter(latlngbounds.getCenter());
						//	v.fitBounds(latlngbounds);
						//}
					}
				}
			}
			
			//if(minzoomout_lvl == 0){ minzoomout_lvl = v.getZoom(); }
			
		}

		function GetRoute(source, destination, marker_color, transparent_val, job_id) {
			
			transparent_val = (parseFloat(transparent_val) > 0) ? transparent_val : 1;
			
			var line = new google.maps.Polyline({
				path: 		[new google.maps.LatLng(source[0], source[1]), new google.maps.LatLng(destination[0], destination[1])],
				strokeColor: 	(marker_color != '') ? marker_color : "#FFFFFF",
				strokeOpacity: transparent_val,
				strokeWeight: 	1.3,
				geodesic: 	true,
				rotation: 	180,
				map: 		v
			});
				
			all_job_routs.push(line);
			//console.log('arijit line');	
			if (job_id != '') {
				//console.log('jid: '+job_id);
				if (job_uber_rush_det.length > 0) {
					for(var a = 0; a < job_uber_rush_det.length; a++)
					{
						if (typeof(job_uber_rush_det[a]) != "undefined") {
							var cur_job_id = (typeof(job_uber_rush_det[a].job_id) != "undefined") ? job_uber_rush_det[a].job_id : '';
							//console.log('cjid: '+cur_job_id);		
							if (cur_job_id == job_id){
								//console.log('pos: '+a); console.log(job_uber_rush_det[a]); 
								job_uber_rush_det[a].route_lines_obj.push(line);
							}
						}
					}
				}
			}
		}
			
		function GetRoute_stroke(source, destination, marker_color, transparent_val, job_id) {
			var lineSymbol = {
				path: 'M 0,-1 0,1',
				strokeOpacity: transparent_val,
				scale: 1.3
			};
				
			var line = new google.maps.Polyline({
				path: 		[new google.maps.LatLng(source[0], source[1]), new google.maps.LatLng(destination[0], destination[1])],
				strokeColor: 	(marker_color != '') ? marker_color : "#FFFFFF",
				strokeOpacity: 0,
				icons: [{
					icon: lineSymbol,
					offset: '0',
					repeat: '10px'
				}],
				strokeWeight: 	1.3,
				geodesic: 	true,
				rotation: 	180,
				map: 		v
			});
				
			all_job_routs.push(line);
			//console.log('arijit dashed line');		
			if (job_id != '') {
					
				if (job_uber_rush_det.length > 0) {
					for(var a = 0; a < job_uber_rush_det.length; a++)
					{
						if (typeof(job_uber_rush_det[a]) != "undefined") {
							var cur_job_id = (typeof(job_uber_rush_det[a].job_id) != "undefined") ? job_uber_rush_det[a].job_id : '';
								
							if (cur_job_id == job_id){
								//console.log('pos: '+a); console.log(job_uber_rush_det[a]); 
								job_uber_rush_det[a].route_lines_obj.push(line);
							}
						}
					}
				}
			}
		}
		
		function GetMultiRoute(patharrs, marker_color, transparent_val) {
			
			var bigline = new google.maps.Polyline({
				path: 		patharrs,
				strokeColor: 	(marker_color != '') ? marker_color : "#FFFFFF",
				strokeOpacity: transparent_val,
				strokeWeight: 	1.3,
				geodesic: 	true,
				rotation: 	180,
				map: 		v
			});
			
			all_job_routs.push(bigline);
		}
		
		function remove_polyline(map) {
			//console.log(all_job_routs);
			if (all_job_routs.length > 0) {
				for (var al = 0; al < all_job_routs.length; al++){
					all_job_routs[al].setMap(null);
				}
			}
			
			all_job_routs = [];
		}
			
		function remove_polyline_uber_rush(routes_arr) {
			//console.log(all_job_routs);
			if (routes_arr.length > 0) {
				for (var al = 0; al < routes_arr.length; al++){
					routes_arr[al].setMap(null);
				}
			}	
		}
			
			
		function i(e) {
			//var image = 'https://a2.muscache.com/airbnb/static/page2/address_pin-92390e9790506fcd9274559dc0dd2efe.png';
			//var  a = new google.maps.Marker({
			//	    position: new google.maps.LatLng(req_lat, req_lng),
			//	    title: 'center',
			//	    mid: e,
			//	    icon: image
			//	});
			////console.log('marker obj: '+a.toString());
			//a.setMap(v);
			//w.push(a);
			
			//console.log('marker length: '+w.length);
			for (var t = 0; t < w.length; t++){ w[t].setMap(e) }
		}
  
		function r() {
			i(null)
		}
  
		function l() {
			i(v)
		}

		function g(t) {
			var page 		= t.page,
			per_page 		= t.per_page,
			count    		= t.count,
			total_pages 	= t.total_pages;
			
			var n = selected = '';
			if (t.links_all != '') {
				f = decodeURIComponent((t.links_all+'').replace(/\+/g, '%20'));
				
				return f;
			}
			else if (total_pages > 1) {
				
				var p1 = (page != 1) ? page -1 : 1;
				
				var p = '';
				//var p = (page != 1) ? '<li><a href="javascript:go_to_page('+p1+')" class="ms-pagination-button" data-href="'+p1+'">Previous</a></li>' : '';
				for(var i=1; i<=total_pages; i++){
					if (i == page){ selected = 'pgn_li_selected'; click_fnc = 'void(0)'; }
					else{ selected = ''; click_fnc = 'go_to_page('+i+')'; }
					
					var n = n + '<li><a href="javascript:'+click_fnc+'" class="ms-pagination-button ' + selected + '" data-href="' + i + '">' + i + "</a></li>";
				}
				
				var a = '';
				//var a = (page != total_pages) ? '<li><a href="javascript:go_to_page('+i+')" class="ms-pagination-button" data-href="' + (i + 1) + '">Next</a></li>' : '';
				
				var f = '<ul class="pagination">' + p + n + a + '</ul>';
				
				//return e(p + n + a).wrapAll("<ul></ul>").parent().addClass("pagination");
				return f;
			}
			else
				return '';
		}
  
		function c() {
			//0 != d.filters_form && "string" == typeof d.filters_form && e(d.filters_form + " :input").change(function() {
			//	var t = e(d.filters_form).serializeArray(),
			//		n = [];
			//	for (var a in t) n[t[a].name] = t[a].value;
			//	e.fn.mapSearch.update(n)
			//}) 
			//alert(d.filters_form);
			//_ = n(), a(b)
			
			0 != d.filters_form && "string" == typeof d.filters_form && e(d.filters_form).click(function() {
				//var is_all_ok 		= parseInt($('#is_all_proper').val());
				//console.log('arijit is_all_ok : '+ is_all_ok);
				//is_requested_search = 1;
				//if (is_all_ok == 1) {
					//search_clicked = (search_clicked == 1) ? 0 : 1;
					var t = e(d.filters_form).serializeArray(),
						n = [];
					for (var a in t) n[t[a].name] = t[a].value;
					isZoomed = 1;
					e.fn.mapSearch.update(n);
				//}
			})
		}
  
		function p() {
			r(), w = []
		}

		function u(t, n) {
			
			var a = e(e.parseHTML(d.listing_template(n))).wrap(d.listing_wrapper).parent().attr("data-mid", t).attr('id', 'm_'+n.item).addClass(d.listing_class).mouseenter(function() {
				var t = e(this).attr("data-mid");
				e(this).addClass('highlight_div');
				
				var marker_id = e(this).attr("id");
				//console.log('mid: '+marker_id);
				
				e.each(w, function(e, n) {
				    //Number(n.get("mid")) === Number(t) && n.set('labelClass', 'map-marker active');
				    jQuery('.'+marker_id).addClass('active');
				    //$('.'+marker_id).addClass('active');
				})
			}).mouseleave(function() {
				var t = e(this).attr("data-mid");
				var marker_id = e(this).attr("id");
				e(this).removeClass('highlight_div');
				e.each(w, function(e, n) {
				   // Number(n.get("mid")) === Number(t) && n.set('labelClass', 'map-marker');
				    jQuery('.'+marker_id).removeClass('active');
				    
				})
			});
			e(d.listings_el).append(a)
		}
		
		var request_city = $("#request_addr").val();
		var markerClick = isBounce = isZoomed = 0;
		var m, d, _, f, h, C, w = [],
		    b = [];
		if (m = this[0], d = e.extend({
				zoom: 			2,
				minzoomLevel: 		2,
				maxZoom:		 	16,
				initialPosition: 	[40.7128, -74.0059],
				request_uri: 		"http://localhost/ArijitM/Freelander/test-location-json.php",
				listings_el: 		"#ms-listings",
				pagination_el: 	"#ms-pagination",
				listing_template: 	function(e) {
					return '<div class="listing"><h3>' + e.name + "</h3><p><strong>Address : </strong>" + e.address + "</p><p><strong>Women owned:</strong> " + e.women + "</p><p><strong>Accept Govt Credit card:</strong> " + e.gcc + "</p></div>"
				},
				listing_wrapper: 	"<div></div>",
				page_number: 		function(e) {
				    return e.meta.page
				},
				listing_latlng: 	function(e) {
				    return [e.latlon[0], e.latlon[1]]
				},
				infowindow_content: function(e) {
					return "<div>" + decodeURIComponent((e.info_content+'').replace(/\+/g, '%20')) + "<div>"
					//return 	'<div class="popup-wrap">'
					//			+'<div class="user-top">'
					//				+'<div class="user-img"><img src="'+base_url+'assets/site/images/user-img.jpg" alt="user-img" /></div>'
					//				+'<h3>David James</h3>'
					//			+'</div>'
					//			+'<div class="popup-form">'
					//				+'<div class="terms">'
					//					+'<div class="terms-scroll custom-scrollbar">'
					//						+'<div class="terms-content">'
					//							+'<p class="big-text">408 Miles - Fort Lauderdale <br/>'
					//							+'Deliver By: 1st June 2016 <br/>'
					//							+'12 Tonnes / 3 Pallets <br/>'
					//							+'ForkLift Required</p>'
					//						+'</div>'
					//					+'</div>'
					//				+'</div>'
					//				+'<div class="popup-btns">'
					//					+'<input type="button" value="SEND MESSAGE" class="submit-leg" data-role="none" />'
					//					+'<input type="button" value="SUBMIT LEG" class="submit-leg" data-role="none" />'
					//					+'<input type="button" value="SUBMIT QUOTE" class="submit-leg" data-role="none" />'
					//				+'</div>'
					//			+'</div>'
					//		+'</div>';
					
					//return "";
				},
				map_class: "ms-map",
				listings_class: "ms-results",
				listing_class: "ms-listing p-listing clearfix",
				pagi_link_class: "ms-pagination-button",
				next_btn_text: "Next",
				prev_btn_text: "Previous",
				loading_class: "loading",
				icon: assets_url+"site/map/img/normal.png",
				highlighted_icon: assets_url+"site/map/img/highlight.png",
				results_key: "results",
				filters_form: !1,
				marker_clusterer: !1,
				search_box: !0,
				searchbox_class: "form-control",
				searchbox_placeholder: "Search for a location",
				valueto_pass: "",
				values_arr: "",
				is_searched: "0",
				is_searched1: "0",
				map_styles: [],
				icon_style: [],
			}, t), e(d.listings_el).addClass(d.listings_class), e(m).addClass(d.map_class), h = {
				center: 			new google.maps.LatLng(d.initialPosition[0], d.initialPosition[1]),
				zoom: 			d.zoom,
				maxZoom: 			d.maxZoom,
				streetViewControl: 	!1,
				panControl: 		!0,
				panControlOptions: { position: google.maps.ControlPosition.RIGHT_BOTTOM },
				zoomControl: 		true,
				mapTypeControl: 	false,
				scrollwheel: 		true,
				zoomControlOptions: {
									style: google.maps.ZoomControlStyle.LARGE,
									position: google.maps.ControlPosition.RIGHT_BOTTOM
				},
				styles:			d.map_styles,
			}, v = new google.maps.Map(m, h), d.search_box)
			
			
			
			// Try HTML5 geolocation.
			//if (request_city == ''){
				if (navigator.geolocation) {
					
					navigator.geolocation.getCurrentPosition(function(position) {
						var pos = {
							lat: position.coords.latitude,
							lng: position.coords.longitude
						};
						
						//console.log(pos);
						
						var latlng 	= new google.maps.LatLng(pos.lat, pos.lng);
						var geocoder 	= new google.maps.Geocoder();
						geocoder.geocode({'latLng': latlng}, function(results, status) {
							//console.log(results);
							if (status == google.maps.GeocoderStatus.OK) {
								var formatted_address = results[0].formatted_address;
								
								if (results.length > 0)
								{
									if(typeof(results[0].geometry.location) != "undefined")
										srch_lat = results[0].geometry.location.lat();
									
									if(typeof(results[0].geometry.location) != "undefined")
										srch_lon = results[0].geometry.location.lng();
									
									if(typeof(results[0].geometry.viewport) != "undefined")
										sw_lat1 = results[0].geometry.viewport.getSouthWest().lat();
									
									if(typeof(results[0].geometry.viewport) != "undefined")
										sw_lng1 = results[0].geometry.viewport.getSouthWest().lng();
									
									if(typeof(results[0].geometry.viewport) != "undefined")
										ne_lat1 = results[0].geometry.viewport.getNorthEast().lat();
									
									if(typeof(results[0].geometry.viewport) != "undefined")
										ne_lng1 = results[0].geometry.viewport.getNorthEast().lng();
										
									$('#sw_lat').val(sw_lat1); $('#sw_lng').val(sw_lng1); $('#ne_lat').val(ne_lat1); $('#ne_lng').val(ne_lng1);
									
									//console.log('browser location get and set the lat lng');
									$('#srch_lat').val(srch_lat); $('#srch_lon').val(srch_lon);
									
									req_lat = srch_lat; req_lng = srch_lon;
									
									//browser location get
									$('#is_all_proper').val(1);
									//console.log('no pagination.');
								}
							}
						});
						
						v.setCenter(pos);
					}, function() {
						//handleLocationError(true, infoWindow, map.getCenter());
					});
				} else {
					// Browser doesn't support Geolocation
					//handleLocationError(false, infoWindow, map.getCenter());
				}
			//}
			
			if ("object" == typeof google.maps.places) {
				//e(m).prepend('<input style="top:25px !important;" type="text" id="search-form">');
				var x = document.getElementById("search_place");
				e("#search_place").addClass(d.searchbox_class).prop("placeholder", d.searchbox_placeholder);
				//, v.controls[google.maps.ControlPosition.TOP_CENTER].push(x);
				var k = new google.maps.places.SearchBox(x);
				google.maps.event.addListener(k, "places_changed", function() {
					//console.log('Place chnaged');
					//browser location get
					place_changed = 1;
					var e = k.getPlaces();
					place = k.getPlaces();
					
					var new_addr = ''; var current_addr = $("#current_address").val();
					
					if (place.length > 0){ new_addr = place[0].formatted_address; }
					
					$("#current_address").val(new_addr);
					
					document.getElementById('err_search_str').innerHTML='';
					slider_loaded = 0;
					//map_location_changed = 1;
					
					e.length > 0 && v.panTo(e[0].geometry.location);
					
					var sw_lat1 = sw_lng1 = ne_lat1 = ne_lng1 = srch_lat = srch_lon = '';
					
					srch_lat = v.getCenter().lat()
					srch_lon = v.getCenter().lng()
					
					if (place.length > 0)
					{
						administrative_levels = (typeof(place[0].address_components) != "undefined") ? place[0].address_components.length : '1';
						administrative_levels = parseInt(administrative_levels);
						//console.log('place change admin level: '+administrative_levels);
						
						if(typeof(place[0].geometry.location) != "undefined")
						srch_lat = place[0].geometry.location.lat();
					
						if(typeof(place[0].geometry.location) != "undefined")
							srch_lon = place[0].geometry.location.lng();
						
						if(typeof(place[0].geometry.viewport) != "undefined")
							sw_lat1 = place[0].geometry.viewport.getSouthWest().lat();
						
						if(typeof(place[0].geometry.viewport) != "undefined")
							sw_lng1 = place[0].geometry.viewport.getSouthWest().lng();
						
						if(typeof(place[0].geometry.viewport) != "undefined")
							ne_lat1 = place[0].geometry.viewport.getNorthEast().lat();
						
						if(typeof(place[0].geometry.viewport) != "undefined")
							ne_lng1 = place[0].geometry.viewport.getNorthEast().lng();
							
						$('#sw_lat').val(sw_lat1); $('#sw_lng').val(sw_lng1); $('#ne_lat').val(ne_lat1); $('#ne_lng').val(ne_lng1);
						
						//console.log('position change and set the lat lng');
						$('#srch_lat').val(srch_lat); $('#srch_lon').val(srch_lon);
						req_lat = srch_lat; req_lng = srch_lon;
					}
					
					//var slider_content = $("#slider-range").html();
					//var slider_length = 0;
					//
					//if(slider_content != '') slider_length = 1;
					//
					//if (slider_length == 1) {
					//	$( "#slider-range" ).slider( "destroy" );
					//	$( "#amount" ).val('');
					//}
					
					isZoomed = 0; d.is_searched1 = 1;
					
					
				})
			} else alert("Google Places library not found");
				
			C = new google.maps.InfoWindow, d.marker_clusterer && "function" == typeof MarkerClusterer && (f = new MarkerClusterer(v, w, {
				gridSize: 50,
				maxZoom: 15
			})), new google.maps.event.addListener(v, "idle", function() {
				
				//zoomLevel = v.getZoom();	
				//console.log('arijit:  '+v.getZoom());
					
				//v.setZoom(zoomLevel);	
					
				if (!markerClick && !isBounce) {
					//console.log('map update by pan');
					_ = n(), a(b)
				}
					
				var dt = new Date();
				var time = dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds();	
					
				//console.log('map ideal time: '+time);
				//console.log('pagination clicked :'+pagination_chnaged);
					
				var sw_lat1 = sw_lng1 = ne_lat1 = ne_lng1 = srch_lat = srch_lon = '';
					
				if (map_location_changed == 0 && is_requested_search == 0)
				{
					//console.log('pan entered');
						
					srch_lat = v.getCenter().lat();
					srch_lon = v.getCenter().lng();
						
					sw_lat1 = v.getBounds().getSouthWest().lat();
					sw_lng1 = v.getBounds().getSouthWest().lng();
					ne_lat1 = v.getBounds().getNorthEast().lat();
					ne_lng1 = v.getBounds().getNorthEast().lng();
						
					$('#sw_lat').val(sw_lat1); $('#sw_lng').val(sw_lng1); $('#ne_lat').val(ne_lat1); $('#ne_lng').val(ne_lng1);
						
					$('#srch_lat').val(srch_lat); $('#srch_lon').val(srch_lon);
						
					//if (!markerClick && !isBounce) {
					//	//console.log('map update by pan');
					//	_ = n(), a(b);
					//}
						
					//console.log('map update called');
				}
					
				req_lat = (req_lat == '') ? $('#srch_lat').val() : req_lat;
				req_lng = (req_lng == '') ? $('#srch_lon').val() : req_lng;
					
				markerClick = isBounce = 0;
					
				is_requested_search = 0;
				
			})
			google.maps.event.addListener(v, 'zoom_changed', function() {
					
				var  cur_zoom 	= parseInt(v.getZoom());	
				console.log(v.getZoom() +' '+d.minzoomLevel);
					
				if(cur_zoom >= d.minzoomLevel)
				{
					console.log('test recored');
						
					var prevZoomLevel, zoomLevel;
					prevZoomLevel = d.zoom;
					zoomLevel = v.getZoom();
					place = '';	
						
					//console.log('arijit: '+zoomLevel);
					
					if (prevZoomLevel !== zoomLevel) isZoomed = 1;
						
					var dt = new Date();
					var time = dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds();	
						
					if (map_location_changed == 0 && is_requested_search == 0)
					{
						//console.log('port updated');
							
						srch_lat = v.getCenter().lat();
						srch_lon = v.getCenter().lng();
							
						sw_lat1 = v.getBounds().getSouthWest().lat();
						sw_lng1 = v.getBounds().getSouthWest().lng();
						ne_lat1 = v.getBounds().getNorthEast().lat();
						ne_lng1 = v.getBounds().getNorthEast().lng();
							
						$('#sw_lat').val(sw_lat1); $('#sw_lng').val(sw_lng1); $('#ne_lat').val(ne_lat1); $('#ne_lng').val(ne_lng1);
							
						//console.log('browser zoom changed get and set the lat lng');
						$('#srch_lat').val(srch_lat); $('#srch_lon').val(srch_lon);
					}
						
					map_location_changed = 0; is_requested_search = 0;
					
					//if (minzoomout_lvl > 0) {
					//	if (v.getZoom() < minzoomout_lvl) v.setZoom(minzoomout_lvl);
					//}
				}
				else{
					console.log('test recored 1');
					v.setZoom(d.minzoomLevel);
				}
			})
			, c(), e.fn.mapSearch.update = function(e) {
				//b = e, _ = n(), a(b), delete b.page
				_ = n(), a(b)
			},
			google.maps.event.addListener(C, 'domready', function() {
				// Reference to the DIV which receives the contents of the infowindow using jQuery
				//var iwOuter = $('.gm-style-iw');
				// 
				///* The DIV we want to change is above the .gm-style-iw DIV.
				// * So, we use jQuery and create a iwBackground variable,
				// * and took advantage of the existing reference to .gm-style-iw for the previous DIV with .prev().
				// */
				//var iwBackground = iwOuter.prev();
				//
				//// Remove the background shadow DIV
				//iwOuter.children(':nth-child(1)').css({'overflow' : 'hidden'});
				//
				//// Remove the background shadow DIV
				//iwBackground.children(':nth-child(2)').css({'display' : 'none'});
				// 
				//// Remove the white background DIV
				//iwBackground.children(':nth-child(4)').css({'display' : 'none'});
				//
				//iwBackground.children(':nth-child(3)').css({'z-index' : '9'});
				//
				//// Taking advantage of the already established reference to
				//// div .gm-style-iw with iwOuter variable.
				//// You must set a new variable iwCloseBtn.
				//// Using the .next() method of JQuery you reference the following div to .gm-style-iw.
				//// Is this div that groups the close button elements.
				//var iwCloseBtn = iwOuter.next();
				//
				//// Moves the infowindow 115px to the right.
				//iwOuter.css({left: '-50px'});
				//iwOuter.css({top: '26px'});
				//
				//// Apply the desired effect to the close button
				////iwCloseBtn.css({
				////	'width': '27px',
				////	'height': '27px',
				////	opacity: '1', // by default the close button has an opacity of 0.7
				////	right: '36px', top: '0px', // button repositioning
				////	border: '7px solid #2e0c2f', // increasing button border and new color
				////	'border-radius': '15px', // circular effect
				////	'box-shadow': '0 0 5px #2e0c2f', // 3D effect to highlight the button
				////	'background-color': '#fff'
				////});
				//
				//// The API automatically applies 0.7 opacity to the button after the mouseout event.
				//// This function reverses this event to the desired value.
				////iwCloseBtn.mouseout(function(){
				////	$(this).css({opacity: '1'});
				////});
			});
	}
}(jQuery);